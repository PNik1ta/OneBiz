pipeline {
    agent any

    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: '–í–µ—Ç–∫–∞ –¥–ª—è –¥–µ–ø–ª–æ—è')
    }

    environment {
        DOTENV = credentials('onebiz-dotenv')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "*/${params.GIT_BRANCH}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/PNik1ta/OneBiz',
                            credentialsId: 'github-token'
                        ]]
                    ])
                }
            }
        }

        stage('Write .env') {
            steps {
                script {
                    writeFile file: 'backend/.env', text: "${DOTENV}"
                }
            }
        }

        stage('Fix volume permissions') {
            steps {
                sh '''
                sudo chmod -R 777 "$WORKSPACE/backend/postgres-data" || true
                '''
            }
        }

        stage('Kill containers on 9090') {
            steps {
                sh '''
                CONTAINER=$(docker ps -q --filter "publish=9090") || true
                if [ ! -z "$CONTAINER" ]; then
                    echo "‚ö†Ô∏è Killing container on port 9090: $CONTAINER"
                    docker kill $CONTAINER || true
                fi
                '''
            }
        }

        stage('Kill process on port 9090') {
            steps {
                sh '''
                    PID=$(sudo lsof -ti :9090) || true
                    if [ ! -z "$PID" ]; then
                      echo "üéØ Killing PID on 9090: $PID"
                      sudo kill -9 $PID
                    else
                      echo "‚úÖ Port 9090 is free"
                    fi
                '''
            }
        }

        stage('Restart Containers') {
            steps {
                script {
                    sh "docker compose -f \"$WORKSPACE/backend/docker-compose.yml\" down"
                    sh "docker compose -f \"$WORKSPACE/backend/docker-compose.yml\" up -d --build"
                }
            }
        }
    }

    post {
        success { echo "‚úÖ –î–µ–ø–ª–æ–π –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ" }
        failure { echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ" }
    }
}
