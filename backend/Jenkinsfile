pipeline {
    agent any

   parameters {
    string(name: 'GIT_BRANCH', defaultValue: 'main', description: '–í–µ—Ç–∫–∞ –¥–ª—è –¥–µ–ø–ª–æ—è')
    text(name: 'DOTENV', defaultValue: '''POSTGRES_HOST=postgres
        POSTGRES_USER=admin
        POSTGRES_PASSWORD=admin
        POSTGRES_DB=onebiz
        JWT_SECRET=onebiz_secret_7593
        SUPPORT_EMAIL=npozdeyev@gmail.com''', description: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env')
    }


    environment {
        DOTENV = credentials('onebiz-dotenv')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "*/${params.GIT_BRANCH}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/PNik1ta/OneBiz',
                            credentialsId: 'github-token'
                        ]]
                    ])
                }
            }
        }

        stage('Write .env') {
            steps {
                writeFile file: 'backend/.env', text: params.DOTENV
                sh 'echo "--- .env –∫–æ–Ω—Ç–µ–Ω—Ç ---"'
                sh 'cat backend/.env'
            }
        }

        stage('Fix volume permissions') {
            steps {
                sh '''
                sudo chmod -R 777 "$WORKSPACE/backend/postgres-data" || true
                '''
            }
        }

        stage('Kill containers on 9090') {
            steps {
                sh '''
                CONTAINER=$(docker ps -q --filter "publish=9090") || true
                if [ ! -z "$CONTAINER" ]; then
                    echo "‚ö†Ô∏è Killing container on port 9090: $CONTAINER"
                    docker kill $CONTAINER || true
                fi
                '''
            }
        }

        stage('Kill process on port 9090') {
            steps {
                sh '''
                PIDS=$(sudo lsof -ti :9090) || true
                if [ ! -z "$PIDS" ]; then
                    echo "üéØ Killing processes on port 9090: $PIDS"
                    for pid in $PIDS; do
                        sudo kill -9 $pid || echo "‚ö†Ô∏è Failed to kill $pid (maybe already dead)"
                    done
                else
                    echo "‚úÖ No process on port 9090"
                fi
                '''
            }
        }

        stage('Kill container on port 9090 (—Ä–µ–∞–ª—å–Ω—ã–π —É–±–∏–π—Ü–∞)') {
            steps {
                sh '''
                echo "üîç –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∑–∞–Ω—è–≤—à–∏–π –ø–æ—Ä—Ç 9090..."
                for id in $(docker ps -q); do
                  if docker inspect --format '{{range $p, $conf := .NetworkSettings.Ports}}{{$p}} -> {{(index $conf 0).HostPort}}{{"\\n"}}{{end}}' $id | grep -q ":9090"; then
                    echo "üî™ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $id –¥–µ—Ä–∂–∏—Ç 9090 ‚Äî —É–±–∏–≤–∞–µ–º"
                    docker kill $id || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å $id"
                  fi
                done
                '''
            }
        }

        stage('Debug ls') {
            steps {
                sh 'ls -la backend/'
            }
        }

        stage('DEBUG .env') {
            steps {
                sh 'echo "üîç –í–æ—Ç –¥–∞–Ω–Ω—ã–µ"'

                sh 'cat backend/.env && echo "---" && grep POSTGRES_PASSWORD backend/.env'
            }
        }



        stage('Restart Containers') {
            steps {
                dir('backend') {
                    sh 'docker compose down -v'
                    sh 'docker compose up -d --build'
                }
            }
        }
    }

    post {
        success { echo "‚úÖ –î–µ–ø–ª–æ–π –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ" }
        failure { echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ" }
    }
}
